using Serilog;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Malwarebytes.Audit.FileSystem.Service.WinApi
{
    public class ServiceControlWrapper
    {
        private const string ServiceControlCommandName = "sc.exe";
        private const string CreateCommandName = "create";
        private const string StartCommandName = "start";
        private const string StopCommandName = "stop";
        private const string DeleteCommandName = "delete";
        private const string ServiceName = "MB_FS_Audit";
        private string BinPathTemplate(string path) => $"binpath={path}";

        public async Task InstallAndStart()
        {
            await Install();
            await Start();
        }

        private async Task Install()
        {
            using (Process process = new Process())
            {
                process.StartInfo.FileName = ServiceControlCommandName;
                process.StartInfo.Arguments = string.Format("{0} {1} {2} start=auto",
                    CreateCommandName,
                    ServiceName,
                    BinPathTemplate(Process.GetCurrentProcess().MainModule.FileName));
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.RedirectStandardOutput = true;

                process.ErrorDataReceived += Process_ErrorDataReceived;
                process.OutputDataReceived += Process_OutputDataReceived;

                Log.Information($"Executing command: {process.StartInfo.FileName} {process.StartInfo.Arguments}");
                process.Start();
                process.BeginOutputReadLine();
                process.BeginErrorReadLine();
                await process.WaitForExitAsync();
                process.ErrorDataReceived -= Process_ErrorDataReceived;
                process.OutputDataReceived -= Process_OutputDataReceived;
            }
        }

        private async Task Start()
        {
            using (Process process = new Process())
            {
                process.StartInfo.FileName = ServiceControlCommandName;
                process.StartInfo.Arguments = string.Format("{0} {1}",
                    StartCommandName,
                    ServiceName);
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.RedirectStandardOutput = true;

                process.ErrorDataReceived += Process_ErrorDataReceived;
                process.OutputDataReceived += Process_OutputDataReceived;

                Log.Information($"Executing command: {process.StartInfo.FileName} {process.StartInfo.Arguments}");
                process.Start();
                process.BeginOutputReadLine();
                process.BeginErrorReadLine();
                await process.WaitForExitAsync();
                process.ErrorDataReceived -= Process_ErrorDataReceived;
                process.OutputDataReceived -= Process_OutputDataReceived;
            }
        }

        private async Task Stop()
        {
            using (Process process = new Process())
            {
                process.StartInfo.FileName = ServiceControlCommandName;
                process.StartInfo.Arguments = string.Format("{0} {1}",
                    StopCommandName,
                    ServiceName);
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.RedirectStandardOutput = true;

                process.ErrorDataReceived += Process_ErrorDataReceived;
                process.OutputDataReceived += Process_OutputDataReceived;

                Log.Information($"Executing command: {process.StartInfo.FileName} {process.StartInfo.Arguments}");
                process.Start();
                process.BeginOutputReadLine();
                process.BeginErrorReadLine();
                await process.WaitForExitAsync();
                process.ErrorDataReceived -= Process_ErrorDataReceived;
                process.OutputDataReceived -= Process_OutputDataReceived;
            }
        }

        private async Task Uninstall()
        {
            using (Process process = new Process())
            {
                process.StartInfo.FileName = ServiceControlCommandName;
                process.StartInfo.Arguments = string.Format("{0} {1}",
                    DeleteCommandName,
                    ServiceName);
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.RedirectStandardOutput = true;

                process.ErrorDataReceived += Process_ErrorDataReceived;
                process.OutputDataReceived += Process_OutputDataReceived;

                Log.Information($"Executing command: {process.StartInfo.FileName} {process.StartInfo.Arguments}");
                process.Start();
                process.BeginOutputReadLine();
                process.BeginErrorReadLine();
                await process.WaitForExitAsync();
                process.ErrorDataReceived -= Process_ErrorDataReceived;
                process.OutputDataReceived -= Process_OutputDataReceived;
            }
        }

        private void Process_OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            Log.Information(e.Data);
        }

        private void Process_ErrorDataReceived(object sender, DataReceivedEventArgs e)
        {
            Log.Error(e.Data);
        }

        public async Task StopAndUninstall()
        {
            await Stop();
            await Uninstall();
        }
    }
}
