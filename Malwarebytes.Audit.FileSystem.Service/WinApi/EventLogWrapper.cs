using Malwarebytes.Audit.FileSystem.Service.Model;
using Serilog;
using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Malwarebytes.Audit.FileSystem.Service.WinApi
{
    public class EventLogWrapper
    {
        public AuditEventDetails Search(FSActionDetails fsActionDetails)
        {
            AuditEventDetails result = null;
            try
            {
                string queryString =
                "<QueryList>"
                + "<Query Id=\"0\" Path=\"Security\">"
                + $"<Select Path=\"Security\">*[System[band(Keywords, 9007199254740992) and (EventID = 4656 or EventID = 4663 or EventID = 4670) and TimeCreated[@SystemTime &gt;= '{fsActionDetails.CreatedAt.AddMilliseconds(-100).ToString("o")}' and @SystemTime &lt;= '{fsActionDetails.CreatedAt.AddSeconds(2).ToString("o")}']]]</Select>"
                + "</Query>"
                + "</QueryList>";

                EventLogQuery query = new EventLogQuery("Security", PathType.LogName, queryString);
                query.ReverseDirection = true;

                using (EventLogReader logReader = new EventLogReader(query))
                using (EventLogPropertySelector propSelector = new EventLogPropertySelector(new string[] {
            "Event/EventData/Data[@Name='SubjectUserName']",
            "Event/EventData/Data[@Name='ObjectType']",
            "Event/EventData/Data[@Name='ObjectName']",
            "Event/EventData/Data[@Name='ProcessId']"}))
                {
                    EventRecord eventEntry = logReader.ReadEvent();
                    while (eventEntry != null)
                    {
                        try
                        {
                            var eventEntryPropertyValues = ((EventLogRecord)eventEntry).GetPropertyValues(propSelector);
                            if ((string)eventEntryPropertyValues[2] == fsActionDetails.FullPath)
                            {
                                result = new AuditEventDetails()
                                {
                                    UserName = eventEntryPropertyValues[0].ToString(),
                                    ProcessId = eventEntryPropertyValues[3].ToString()
                                };
                                break;
                            }
                        }
                        finally
                        {
                            ((IDisposable)eventEntry).Dispose();
                        }

                        eventEntry = logReader.ReadEvent();
                    }
                }
            }
            catch(Exception ex)
            {
                Log.Error(ex, $"Failed to search for event in Audit Event Log for {fsActionDetails.FullPath}.");
            }
            return result;
        }

    }
}
