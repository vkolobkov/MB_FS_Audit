using Malwarebytes.Audit.FileSystem.Service.Model.Configuration;
using Malwarebytes.Audit.FileSystem.Service.Services;
using Malwarebytes.Audit.FileSystem.Service.WinApi;
using Serilog;
using System.Runtime.Versioning;

namespace Malwarebytes.Audit.FileSystem.Service
{
    [SupportedOSPlatform("windows")]
    public class Program
    {
        public static void Main(string[] args)
        {
            Environment.SetEnvironmentVariable("LOGDIR", AppContext.BaseDirectory);
            Log.Logger = new LoggerConfiguration()
                .WriteTo.Console()
                .WriteTo.File(Path.Combine(AppContext.BaseDirectory, "configuration.log.txt"))
                .CreateBootstrapLogger();

            try
            {
                if (Install(args)) return;
                if (Uninstall(args)) return;

                IHost host = Host.CreateDefaultBuilder(args)
                    .ConfigureAppConfiguration((hostingContext, configuration) =>
                    {
                        configuration.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath)
                        .AddJsonFile("audit.settings.json", optional: true, reloadOnChange: true);
                    })
                    .UseSerilog((context, services, configuration) =>
                    {
                        configuration.ReadFrom.Configuration(context.Configuration)
                        .ReadFrom.Services(services);
                    })
                    .UseWindowsService(options =>
                    {
                        options.ServiceName = "Malwarebytes Audit FS";
                    })
                    .ConfigureServices((hostingContext, services) =>
                    {
                        services.Configure<AuditSettings>(hostingContext.Configuration.GetSection(nameof(AuditSettings)));
                        services.AddSingleton<IFSEventStore, FSEventStore>();
                        services.AddHostedService<FileSystemNotifier>();
                        services.AddHostedService<EventAggregator>();
                    })
                    .Build();

                host.Run();
            }
            catch (Exception ex)
            {
                Log.Fatal(ex, "Service startup failed.");
            }
            finally
            {
                Log.CloseAndFlush();
            }
        }

        private static bool Install(string[] args)
        {
            if (args.Length > 0 && args[0].TrimStart('-').Equals("install", StringComparison.InvariantCultureIgnoreCase))
            {
                try
                {
                    ServiceControlWrapper csWrapper = new ServiceControlWrapper();
                    csWrapper.InstallAndStart().GetAwaiter().GetResult();
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "Installation of service failed with Exception.");
                }
                return true;
            }
            return false;
        }

        private static bool Uninstall(string[] args)
        {
            if (args.Length > 0 && args[0].TrimStart('-').Equals("uninstall", StringComparison.InvariantCultureIgnoreCase))
            {
                try
                {
                    ServiceControlWrapper csWrapper = new ServiceControlWrapper();
                    csWrapper.StopAndUninstall().GetAwaiter().GetResult();
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "Uninstallation of service failed with Exception.");
                }
                return true;
            }
            return false;
        }
    }
}