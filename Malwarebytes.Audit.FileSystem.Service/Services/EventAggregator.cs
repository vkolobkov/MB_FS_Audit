using Malwarebytes.Audit.FileSystem.Service.Model;
using Malwarebytes.Audit.FileSystem.Service.WinApi;
using Serilog.Context;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Malwarebytes.Audit.FileSystem.Service.Services
{
    public class EventAggregator : BackgroundService
    {
        private readonly ILogger<EventAggregator> _logger;
        private readonly IFSEventStore _eventStore;

        public EventAggregator(ILogger<EventAggregator> logger, IFSEventStore eventStore)
        {
            _logger = logger;
            _eventStore = eventStore;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                FSActionDetails fsActionDetails = _eventStore.Dequeue();
                if(fsActionDetails == null)
                {
                    _eventStore.WaitForEvents(1000);
                    continue;
                }
                TimeSpan timeToAwait = fsActionDetails.CreatedAt.Subtract(DateTime.UtcNow);
                if (timeToAwait.TotalMilliseconds > -1000) await Task.Delay(1000 + (int)timeToAwait.TotalMilliseconds);
                EventLogWrapper eventLogWrapper = new EventLogWrapper();
                AuditEventDetails auditEventDetails = eventLogWrapper.Search(fsActionDetails);

                string oldPath = string.IsNullOrWhiteSpace(fsActionDetails.OldFullPath) ? null : $"'{fsActionDetails.OldFullPath}'=>";
                using (LogContext.PushProperty("source", "audit"))
                    _logger.LogInformation($"{fsActionDetails.CreatedAt} - {fsActionDetails.ChangeType} - {oldPath}'{fsActionDetails.FullPath}' - {auditEventDetails?.UserName} - {auditEventDetails?.ProcessId}");
            }
        }
    }
}
